require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
use_frameworks! :linkage => linkage.to_sym
end
install! 'cocoapods', :deterministic_uuids => false

source 'https://cdn.cocoapods.org'
source 'https://gitlab.com/phyreapp/ios-specs.git'

target 'CarmoolaApp' do
$RNFirebaseAsStaticFramework = true
config = use_native_modules!

use_react_native!(
:path => config[:reactNativePath],
:production => true,
:hermes_enabled => true,
:fabric_enabled => false,
:flipper_configuration => true ? FlipperConfiguration.disabled : FlipperConfiguration.new(true, ['Debug'], { 'Flipper' => '0.182.0' }),
:app_path => "#{Pod::Config.instance.installation_root}/.."
)

target 'CarmoolaAppTests' do
inherit! :complete
end

pod 'FirebaseCore', :modular_headers => true
pod 'FirebaseInstallations', :modular_headers => true
pod 'FirebaseSessions', :modular_headers => true
pod 'FirebaseCoreExtension', :modular_headers => true
pod 'GoogleUtilities', :modular_headers => true
pod 'GoogleDataTransport', :modular_headers => true
pod 'nanopb', :modular_headers => true
pod 'ApplePayProvisioning', '>=1.0.0'

$dynamic_frameworks = ['Alamofire', 'ObjectMapper', 'AlamofireObjectMapper', 'EasyPeasy', 'ApplePayProvisioning']
pre_install do |installer|
installer.pod_targets.each do |pod|
if $dynamic_frameworks.include?(pod.name)
puts "Overriding the build_type to dynamic_framework for #{pod.name}"
def pod.build_type;
Pod::BuildType.dynamic_framework
end
end
end
end

post_install do |installer|
react_native_post_install(installer,
:mac_catalyst_enabled => false)
installer.pods_project.targets.each do |target|
target.build_configurations.each do |config|
config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
end
end
installer.pods_project.targets.each do |target|    
    if target.respond_to?(:product_type) and target.product_type == "com.apple.product-type.bundle"   
           target.build_configurations.each do |config|        
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'  
                    end     
                   end   
                  end 
                end 
              end